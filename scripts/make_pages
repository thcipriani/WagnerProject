#!/usr/bin/env python2

import logging
import os
import re
import subprocess
import sys

logging.basicConfig(level=logging.DEBUG)
LOG = logging.getLogger()

# Make _site dir
base_name = os.path.normpath(
    os.path.join(os.path.dirname(os.path.realpath(__file__)), '..'))
page_dir = os.path.join(base_name, '_site')

ret = subprocess.check_call(['mkdir', '-p', page_dir])

# Compile/copy site css

# Parse README.md
with open(os.path.join(base_name, 'README.md')) as f:
    page = f.read()

pages = page.split('<!-- PAGE BREAK -->')

page_count = 1
pattern = r'\#+\s+([\s\w\'\"\:!\?\,._-]+?)$'

special_pages = {
    '1': {
        'out': 'index.md',
    }
}

previous_link = '/{}.html'
for page in pages:
    page = page.strip()
    match = re.search(pattern, page, re.M)
    if match is None:
        LOG.warn('Page #{} has no title!'.format(page_count))
        sys.exit(1)
    s = match.start()
    e = match.end()
    title = page[s:e].lstrip('#').rstrip('!?.').strip()
    page_name = ''
    try:
        out_page = special_pages[str(page_count)]['out']
    except KeyError:
        page_name = title.lower().replace(' ', '-')
        page_name = re.sub(r'[^\w-]+', '', page_name)
        out_page = 'pages/{}.md'.format(page_name)

    frontmatter = [
        '---',
        'layout: page',
        'title: {}'.format(title),
    ]

    with open(out_page, 'w') as f:
        if previous_link:
            frontmatter.append('previous: {}'.format(previous_link))

        frontmatter.append('...')

        f.write('\n'.join(frontmatter) + '\n' + page)

    previous_link = '<a class="prev-link" href="/{}.html">Previous</a>'.format(page_name)
    page_count = page_count + 1
